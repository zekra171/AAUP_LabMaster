@using System.Security.Claims
@model List<AAUP_LabMaster.Models.Equipment>
@{
    ViewData["Title"] = "Available Equipment";
    Layout = "_UserLayout";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <script src="https://cdn.tailwindcss.com"></script>
    <title>@ViewData["Title"]</title> @* Add title to head *@
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="max-w-6xl mx-auto p-6">
        <h2 class="text-2xl font-bold mb-4">Available Equipment</h2>
     
        
        @if (User.IsInRole("Supervisour"))
        {
            <div class="mb-4">
                <a href="@Url.Action("AddNewEquipment", "Supervisour")"
                   class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    + Add New Equipment
                </a>
            </div>

            <div class="mb-6">
                <div class="flex">
                    <input type="text"
                           id="searchInput"
                           placeholder="Search by name or description"
                           class="flex-grow px-4 py-2 border rounded-l focus:outline-none focus:ring-2 focus:ring-blue-500" />
                           
                    <button onclick="performSearch()" type="button"
                            class="ml-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold px-4 py-2 rounded-r shadow">
                            Search
                    </button>

                    <button onclick="clearSearch()" type="button"
                            class="ml-2 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded">
                        Clear
                    </button>
                </div>
            </div>
        }

        <div id="equipmentResults">
            @* The table will be injected here by JavaScript on initial load and subsequent searches *@
            @* No @Html.Partial("_EquipmentTable", Model) here anymore! *@
        </div>
    </div>

    <script>
        // Function to perform the search and update the table
        function performSearch() {
            const query = document.getElementById('searchInput').value;
            // The URL should correctly point to your controller action
            // Assuming the controller action is named ViewAllEquipments in the User controller
            fetch(`/User/ViewAllEquipments?searchString=${encodeURIComponent(query)}&isPartial=true`, { // Pass isPartial=true
                headers: {
                    "X-Requested-With": "XMLHttpRequest" // Good practice for AJAX requests
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.text();
            })
            .then(html => {
                document.getElementById('equipmentResults').innerHTML = html;
                // Preserve the search value in the input field if you re-add it
                // document.getElementById('searchInput').value = query; // Uncomment if needed
            })
            .catch(error => {
                console.error('Fetch error:', error);
                document.getElementById('equipmentResults').innerHTML = '<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert"><strong class="font-bold">Error!</strong><span class="block sm:inline"> Failed to load equipment.</span></div>';
            });
        }

        // Function to clear the search input and re-run search
        function clearSearch() {
            document.getElementById('searchInput').value = '';
            performSearch(); // Re-run search to show all equipment
        }

        // Initial load of the table when the page loads
        // This ensures the table is displayed even without a search
        document.addEventListener('DOMContentLoaded', performSearch); // Call performSearch on page load
    </script>
</body>
</html> 